---
- hosts: localhost
  connection: local
  roles:
    - role: avinetworks.avisdk
  tasks:
    - name: Pull in Site Variables
      include_vars: /tmp/site_vars.yml

    - name: Wait for Controller before 
      avi_api_session:
        avi_credentials: "{{ avi_credentials }}"
        api_version: "{{ avi_credentials.api_version }}"
        http_method: get
        timeout: 300
        path: "cluster/runtime"
      register: cluster_status
      until: cluster_status.obj.cluster_state.state == "CLUSTER_UP_NO_HA"

    - name: Setup Avi Site
      import_role:
        name: avinetworks.aviconfig
      vars:
        avi_config_file: site_config.yml

    - name: Add Hackazon WAF Policy
      avi_wafpolicy:
        avi_credentials: "{{ avi_credentials }}"
        name: "Hackazon-WAF"
        mode: "WAF_MODE_ENFORCEMENT"
        paranoia_level: "WAF_PARANOIA_LEVEL_LOW"
        failure_mode: "WAF_FAILURE_MODE_OPEN"
        waf_profile_ref: "/api/wafprofile/?name=System-WAF-Profile"
        waf_crs_ref: "/api/wafcrs/?name=CRS-2021-1"

    - name: Add AKO Helm Repo
      kubernetes.core.helm_repository:
        name: ako
        repo_url: https://projects.registry.vmware.com/chartrepo/ako

    - name: Create Values file for AKO Deployment
      template:
        src: ako-values.j2
        dest: values.yaml

    - name: Deploy AKO
      kubernetes.core.helm:
        name: ako
        chart_ref: ako/ako
        chart_version: "{{ ako_version }}"
        release_namespace: avi-system
        create_namespace: yes
        update_repo_cache: yes
        values: "{{ lookup('file', 'values.yaml') | from_yaml }}"

    - name: Apply Avi Infra CRD
      kubernetes.core.k8s:
        state: present
        src: crds/AviInfraSetting.yaml

    - name: Extend Default Ingress Class
      kubernetes.core.k8s:
        state: present
        src: k8s/AviIngressClass.yaml

    - name: Create Hackazon Certificate
      shell: openssl req -x509 -newkey rsa:4096 -nodes -keyout hackazon-key.pem -out hackazon-cert.pem -sha256 -days 365 -subj '/CN=hackazon.{{ default_domain }}'

    - name: Create Kubernetes TLS Secret for Hackazon
      shell: kubectl create secret tls hackazon --cert=hackazon-cert.pem --key=hackazon-key.pem
      ignore_errors: true

    - name: Generate Hackazon K8s Manifests
      template:
        src: '{{ item.src }}'
        dest: '{{ item.dest }}'
        owner: aviadmin
        group: aviadmin
      loop:
        - { src: 'templates/hackazon/1-hackazon-deployment.j2', dest: '/home/aviadmin/hackazon/1-hackazon-deployment.yaml' }
        - { src: 'templates/hackazon/2-hackazon-service.j2', dest: '/home/aviadmin/hackazon/2-hackazon-service.yaml' }
        - { src: 'templates/hackazon/3-hackazon-ingress.j2', dest: '/home/aviadmin/hackazon/3-hackazon-ingress.yaml' }
        - { src: 'templates/hackazon/4-hackazon-hostrule-crd.j2', dest: '/home/aviadmin/hackazon/4-hackazon-hostrule-crd.yaml' }